{"componentChunkName":"component---src-templates-post-page-jsx","path":"/blog/wildfly-jms-tutorial","result":{"data":{"markdownRemark":{"frontmatter":{"title":"WildFly 9 - A JMS-oriented tutorial","date":"2015-12-15","description":null,"tags":["wildfly","jms","java","hornetq","tutorial","servlet","message-driven","ejb"]},"html":"<p>Java Message Service (JMS) is a simple and elegant API abstracting message-oriented middleware; in this tutorial, we'll see how to easily set up a new instance of the WildFly 9 application server with JMS support.</p>\n<p>Of course, this is just one of many possible configurations, but it should enable developers to quickly have a working JMS environment, especially when learning this technology for the first time; in particular, we'll consider how to expose HornetQ to local and remote clients, also creating <em>application users</em> for remote authentication.</p>\n<p>The instructions are for Unix systems, but Windows users can easily customize the steps just by employing - in lieu of the mentioned <em>shell scripts</em> - the corresponding <em>.bat</em> files.</p>\n<h2>Outline</h2>\n<ul>\n<li>Installing WildFly</li>\n<li>First-time configuration</li>\n<li>Starting WildFly with HornetQ, to enable messaging</li>\n<li>Creating a queue and a connection factory</li>\n<li>Configuring the authentication subsystem to define a user for sending messages (in case of remote access)</li>\n<li>Developing a basic servlet that sends a message to the queue</li>\n<li>Preparing a message-driven bean that receives messages from the above queue</li>\n</ul>\n<h2>Adding a management user</h2>\n<ol>\n<li>Download and install a copy of WildFly from <a href=\"http://wildfly.org/\">its website</a></li>\n<li>\n<p>Go to its <strong>bin</strong> directory, and run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./add-user.sh</code></pre></div>\n<p>this script will request a few parameters. You should provide:</p>\n<ul>\n<li><strong>Type of user</strong>: <em>Management User</em></li>\n<li><strong>Username</strong>: <em>your private username</em></li>\n<li><strong>Password</strong>: <em>your private password</em></li>\n<li><strong>Groups</strong>: <em>can be left empty</em></li>\n<li><strong>Used for one AS process to connect to another AS process?</strong>: <em>yes</em></li>\n</ul>\n</li>\n<li>\n<p>We'll need to start, from the <strong>bin</strong> directory, the <strong>Full</strong> server profile, as the default profile does not include HornetQ:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./standalone.sh --server-config<span class=\"token operator\">=</span>standalone-full.xml</code></pre></div>\n</li>\n<li>Open your favorite web browser, navigate to the <a href=\"http://localhost:9990\">WildFly management web app</a> and input your credentials chosen at step 2.</li>\n</ol>\n<p>Good! ^__^ WildFly is ready, and can be employed for your JavaEE applications!</p>\n<h2>Creating a ConnectionFactory and a Destination</h2>\n<p>Now, we must create a <strong>ConnectionFactory</strong> and a <strong>Destination</strong> - for now, we'll just employ a <em>Queue</em>.</p>\n<ol>\n<li>\n<p>Go to the <em>Configuration</em> tab of the <a href=\"http://localhost:9990\">Management web app</a> and click on:</p>\n<p><strong>Subsystems -> Messaging (HornetQ) -> View</strong></p>\n</li>\n<li>Click on <strong>default</strong>, then <strong>Destinations</strong></li>\n<li>\n<p>In <strong>Queues/Topics -> Queues</strong>, click <strong>Add</strong> and provide just these parameters:</p>\n<ul>\n<li><strong>Name</strong>: <em>MyQueue</em></li>\n<li><strong>JNDI Names</strong>: <em>java:/myJmsTest/MyQueue</em></li>\n<li><strong>Durable</strong>: <em>yes</em></li>\n</ul>\n</li>\n<li>\n<p>In the <strong>Connection Factories</strong> tab, click <strong>Add</strong> and input these settings:</p>\n<ul>\n<li><strong>Name</strong>: <em>MyConnectionFactory</em></li>\n<li><strong>JNDI Names</strong>: <em>java:/myJmsTest/MyConnectionFactory</em></li>\n<li><strong>Connector</strong>: <em>in-vm</em> or <em>http-connector</em></li>\n</ul>\n<p><strong>in-vm</strong> is the easier choice, as it doesn't require user authentication - but works only in the context of the very same JVM running the server; <strong>http-connector</strong> can be accessed by a remote client, but always requires authentication.</p>\n</li>\n<li>\n<p>Finally, <em>if</em> you have chosen <em>http-connector</em> in the step above, open the <strong>Security Settings</strong> tab, click <strong>Add</strong> and provide these values:</p>\n<ul>\n<li><strong>Pattern</strong>: <em>#</em></li>\n<li><strong>Role</strong>: <em>myJmsGroup</em></li>\n<li><strong>Send?</strong>: <em>yes</em>`*</li>\n<li><strong>Consume?</strong>: <em>yes</em></li>\n<li><strong>Manage?</strong>: <em>yes</em></li>\n</ul>\n</li>\n</ol>\n<h2>Adding an application user</h2>\n<p>If you have chosen <em>http-connector</em> for the client factory, we need to configure an application user, required by HornetQ authentication. Therefore:</p>\n<ol>\n<li>\n<p>Go to WildFly's <strong>bin</strong> directory and run again:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">./add-user.sh</code></pre></div>\n</li>\n<li>\n<p>This time, choose the following parameters:</p>\n<ul>\n<li><strong>Type of user</strong>: <em>Application User</em></li>\n<li><strong>Username</strong>: (arbitrary, but in this example we'll employ) <em>myJmsUser</em></li>\n<li><strong>Password</strong>: (arbitrary, but in this example we'll employ) <em>myJmsPassword</em></li>\n<li><strong>Groups</strong>: (arbitrary, or \"guest\", but in this example we'll employ) <em>myJmsGroup</em></li>\n<li><strong>Used for one AS process to connect to another AS process?</strong>: <em>yes</em></li>\n</ul>\n</li>\n</ol>\n<h2>Writing a producer servlet</h2>\n<p>To test the infrastructure, we are going to develop a servlet that, when invoked, will send a message to our queue.</p>\n<p><strong>NOTE</strong>: the call <strong>connectionFactory.createConnection()</strong> must receive username and password if the connection factory is based on <strong>http-connector</strong>; it <em>can</em> (and, actually, <em>should</em>) receive no parameters when using <strong>in-vm</strong>.</p>\n<p>A simple code example might be:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">info<span class=\"token punctuation\">.</span>gianlucacosta<span class=\"token punctuation\">.</span>jmstest<span class=\"token punctuation\">.</span>web</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Resource</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jms<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WebServlet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServlet</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletRequest</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>servlet<span class=\"token punctuation\">.</span>http<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PrintWriter</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span>urlPatterns <span class=\"token operator\">=</span> <span class=\"token string\">\"/send\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyJmsServlet</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>lookup <span class=\"token operator\">=</span> <span class=\"token string\">\"java:/myJmsTest/MyConnectionFactory\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">ConnectionFactory</span> connectionFactory<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Resource</span><span class=\"token punctuation\">(</span>lookup <span class=\"token operator\">=</span> <span class=\"token string\">\"java:/myJmsTest/MyQueue\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token class-name\">Destination</span> destination<span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span>\n      <span class=\"token class-name\">HttpServletRequest</span> req<span class=\"token punctuation\">,</span>\n      <span class=\"token class-name\">HttpServletResponse</span> resp\n    <span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">PrintWriter</span> writer <span class=\"token operator\">=</span> resp<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">//Authentication info can be omitted if we are using in-vm</span>\n            <span class=\"token class-name\">QueueConnection</span> connection <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">QueueConnection</span><span class=\"token punctuation\">)</span>\n              connectionFactory<span class=\"token punctuation\">.</span><span class=\"token function\">createConnection</span><span class=\"token punctuation\">(</span>\n                <span class=\"token string\">\"myJmsUser\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">\"myJmsPassword\"</span>\n              <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">QueueSession</span> session <span class=\"token operator\">=</span>\n                  connection<span class=\"token punctuation\">.</span><span class=\"token function\">createQueueSession</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token class-name\">Session</span><span class=\"token punctuation\">.</span>AUTO_ACKNOWLEDGE\n                  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\">MessageProducer</span> producer <span class=\"token operator\">=</span>\n                      session<span class=\"token punctuation\">.</span><span class=\"token function\">createProducer</span><span class=\"token punctuation\">(</span>destination<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token class-name\">TextMessage</span> message <span class=\"token operator\">=</span>\n                          session<span class=\"token punctuation\">.</span><span class=\"token function\">createTextMessage</span><span class=\"token punctuation\">(</span>\n                            <span class=\"token string\">\"Hello, world! ^__^\"</span>\n                          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                        producer<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                        writer<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n                          <span class=\"token string\">\"Message sent! ^__^\"</span>\n                        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                        producer<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                    session<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                connection<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span>writer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>Compile this servlet and package it into a <strong>.war</strong> archive (a web application) - using your favorite development tools</li>\n<li>Copy the <strong>.war</strong> file into the <strong>standalone/deployments</strong> directory in WildFly's directory. You don't need to shut down the server</li>\n<li>Invoke the servlet, remembering that it's mapped to the <strong>/send</strong> path of its web application</li>\n<li>\n<p>If the servlet was successful, try returning to the Management web app and navigating to:</p>\n<p><strong>Runtime -> Standalone Server -> Subsystems -> JMS Destinations -> View</strong></p>\n</li>\n<li>In the new page appeared, click on the <strong>View</strong> link next to <em>default</em></li>\n<li>After clicking on <strong>MyQueue</strong>, you should see <em>Message Count: 1</em> !</li>\n</ol>\n<h2>Consuming the message with a message-driven bean</h2>\n<p>Our message is now in the queue, ready to be consumed - let's create a message-driven bean for this task!</p>\n<p>Its code might be:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">info<span class=\"token punctuation\">.</span>gianlucacosta<span class=\"token punctuation\">.</span>jmstest<span class=\"token punctuation\">.</span>beans</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>ejb<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ActivationConfigProperty</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>ejb<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageDriven</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jms<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jms<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageListener</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">javax<span class=\"token punctuation\">.</span>jms<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TextMessage</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@MessageDriven</span><span class=\"token punctuation\">(</span>activationConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token annotation punctuation\">@ActivationConfigProperty</span><span class=\"token punctuation\">(</span>\n                propertyName <span class=\"token operator\">=</span> <span class=\"token string\">\"destination\"</span><span class=\"token punctuation\">,</span>\n                propertyValue <span class=\"token operator\">=</span> <span class=\"token string\">\"java:/myJmsTest/MyQueue\"</span>\n        <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReceivingMdb</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageListener</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">TextMessage</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">TextMessage</span> textMessage <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TextMessage</span><span class=\"token punctuation\">)</span> message<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>\n                  <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token string\">\"A message was found! ^__^ It is: '%s'\"</span><span class=\"token punctuation\">,</span>\n                    textMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                ex<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol>\n<li>Compile this class and package it into an <em>ejb-jar</em>, using your favorite build tools</li>\n<li>Copy the archive file into the <strong>standalone/deployments</strong> directory in WildFly's directory</li>\n<li>Check the console: you should see the bean's output!</li>\n</ol>\n<h2>Conclusion</h2>\n<p>In this brief tutorial we have seen:</p>\n<ul>\n<li>how to install Wildfly and start it with HornetQ support</li>\n<li>how to setup <em>management</em> and <em>application</em> users</li>\n<li>how to create a <strong>ConnectionFactory</strong> and a <strong>Queue</strong> in HornetQ</li>\n<li>how to write a toy servlet sending a message to the queue, and a message-driven bean consuming it</li>\n<li>how to deploy enterprise artifacts without restarting the server</li>\n</ul>\n<p>This is just the beginning! ^__^ I hope you'll find this tutorial a useful starting point for learning more about JMS and WildFly!</p>\n<h2>Further references</h2>\n<ul>\n<li><a href=\"http://wildfly.org/\">WildFly application server</a></li>\n<li><a href=\"http://hornetq.jboss.org/\">HornetQ</a></li>\n<li><a href=\"https://docs.oracle.com/javaee/7/index.html\">Java Platform, Enterprise Edition (Java EE) 7</a></li>\n<li><a href=\"http://www.javaworld.com/article/2074123/java-web-development/transaction-and-redelivery-in-jms.html\">Transaction and redelivery in JMS</a></li>\n</ul>"}},"pageContext":{"nodeId":"b130c13e-eb1c-56e7-b89e-e03a5f9e3931"}},"staticQueryHashes":["3159585216","3567824559"]}